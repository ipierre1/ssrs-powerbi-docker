name: Build and Publish SSRS Docker Image

on:
  push:
    branches: 
      - main
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches: 
      - main
      - master
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even without changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ssrs-powerbi
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build:
    runs-on: windows-latest
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.tags.outputs.tags }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Pour avoir l'historique complet pour les tags

    - name: Check for Dockerfile changes
      id: changes
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.force_build }}" -eq "true") {
          echo "changed=true" >> $env:GITHUB_OUTPUT
          Write-Host "Force build requested"
        }
        elseif ("${{ github.event_name }}" -eq "push" -and "${{ github.ref_type }}" -eq "tag") {
          echo "changed=true" >> $env:GITHUB_OUTPUT
          Write-Host "Tag push detected"
        }
        elseif ("${{ github.event_name }}" -eq "pull_request") {
          echo "changed=true" >> $env:GITHUB_OUTPUT
          Write-Host "Pull request - building for testing"
        }
        else {
          $changedFiles = git diff --name-only HEAD~1 HEAD
          if ($changedFiles -match "(Dockerfile|\.dockerignore|scripts/)" -or "${{ github.event_name }}" -eq "workflow_dispatch") {
            echo "changed=true" >> $env:GITHUB_OUTPUT
            Write-Host "Docker-related files changed or manual trigger"
          } else {
            echo "changed=false" >> $env:GITHUB_OUTPUT
            Write-Host "No Docker-related changes detected"
          }
        }
      shell: powershell
    
    - name: Login to Docker Hub
      # if: steps.changes.outputs.changed == 'true' && github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Generate Docker tags
      # if: steps.changes.outputs.changed == 'true'
      id: tags
      run: |
        $tags = @()
        $baseImage = "${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        
        # Tag based on event type
        switch ("${{ github.event_name }}") {
          "push" {
            if ("${{ github.ref_type }}" -eq "tag") {
              # Version tags for releases
              $version = "${{ github.ref_name }}" -replace "^v", ""
              $tags += "${baseImage}:${version}"
              $versionParts = $version -split "\."
              if ($versionParts.Length -ge 2) {
                $tags += "${baseImage}:$($versionParts[0]).$($versionParts[1])"
              }
              if ($versionParts.Length -ge 1) {
                $tags += "${baseImage}:$($versionParts[0])"
              }
            } else {
              # Branch name tag
              $branchName = "${{ github.ref_name }}" -replace "[^a-zA-Z0-9]", "-"
              $tags += "${baseImage}:${branchName}"
              
              # Latest tag for main/master branch
              if ("${{ github.ref_name }}" -eq "main" -or "${{ github.ref_name }}" -eq "master") {
                $tags += "${baseImage}:latest"
              }
            }
          }
          "pull_request" {
            $tags += "${baseImage}:pr-${{ github.event.number }}"
          }
        }
        
        # Always add date-sha tag
        $date = Get-Date -Format "yyyyMMdd"
        $sha = "${{ github.sha }}".Substring(0, 7)
        $tags += "${baseImage}:${date}-${sha}"
        
        # Output tags
        $tagsString = $tags -join ","
        echo "tags=$tagsString" >> $env:GITHUB_OUTPUT
        echo "primary_tag=$($tags[0])" >> $env:GITHUB_OUTPUT
        
        Write-Host "Generated tags:"
        $tags | ForEach-Object { Write-Host "  - $_" }
      shell: powershell

    - name: Build Docker image
      # if: steps.changes.outputs.changed == 'true'
      id: build
      run: |
        $tags = "${{ steps.tags.outputs.tags }}" -split ","
        $primaryTag = "${{ steps.tags.outputs.primary_tag }}"
        
        # Build arguments
        $buildArgs = @(
          "--build-arg", "BUILD_DATE=$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')",
          "--build-arg", "VCS_REF=${{ github.sha }}",
          "--build-arg", "VERSION=${{ github.ref_name }}"
        )
        
        # Add labels
        $labels = @(
          "--label", "org.opencontainers.image.title=SSRS 2019 Docker",
          "--label", "org.opencontainers.image.description=SQL Server Reporting Services 2019 in Docker container",
          "--label", "org.opencontainers.image.vendor=${{ github.repository_owner }}",
          "--label", "org.opencontainers.image.licenses=MIT",
          "--label", "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}",
          "--label", "org.opencontainers.image.revision=${{ github.sha }}",
          "--label", "org.opencontainers.image.created=$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
        )
        
        Write-Host "Building Docker image with primary tag: $primaryTag"
        
        # Build the image
        $buildCmd = @("docker", "build") + $buildArgs + $labels + @("-t", $primaryTag, ".")
        & $buildCmd[0] $buildCmd[1..($buildCmd.Length-1)]
        
        if ($LASTEXITCODE -ne 0) {
          throw "Docker build failed with exit code $LASTEXITCODE"
        }
        
        # Tag with additional tags
        foreach ($tag in $tags[1..($tags.Length-1)]) {
          Write-Host "Tagging with: $tag"
          docker tag $primaryTag $tag
          if ($LASTEXITCODE -ne 0) {
            throw "Docker tag failed for $tag"
          }
        }
        
        # Get image digest for output
        $imageInfo = docker inspect $primaryTag | ConvertFrom-Json
        $digest = $imageInfo[0].Id
        echo "digest=$digest" >> $env:GITHUB_OUTPUT
        
        Write-Host "Build completed successfully"
        Write-Host "Image ID: $digest"
      shell: powershell

    - name: Push Docker images
      # if: steps.changes.outputs.changed == 'true' && github.event_name != 'pull_request'
      run: |
        $tags = "${{ steps.tags.outputs.tags }}" -split ","
        
        Write-Host "Pushing $($tags.Length) tags to DockerHub..."
        
        foreach ($tag in $tags) {
          Write-Host "Pushing: $tag"
          docker push $tag
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to push $tag"
          }
          Write-Host "âœ“ Successfully pushed: $tag"
        }
        
        Write-Host "All images pushed successfully!"
      shell: powershell

    - name: Generate SBOM
      # if: steps.changes.outputs.changed == 'true' && github.event_name != 'pull_request'
      run: |
        # Install Syft for Windows SBOM generation
        $syftVersion = "0.98.0"
        $downloadUrl = "https://github.com/anchore/syft/releases/download/v${syftVersion}/syft_${syftVersion}_windows_amd64.zip"
        
        Write-Host "Downloading Syft v$syftVersion..."
        Invoke-WebRequest -Uri $downloadUrl -OutFile "syft.zip"
        Expand-Archive -Path "syft.zip" -DestinationPath "C:\syft" -Force
        
        # Generate SBOM
        $primaryTag = "${{ steps.tags.outputs.primary_tag }}"
        Write-Host "Generating SBOM for: $primaryTag"
        
        C:\syft\syft.exe $primaryTag -o spdx-json=sbom.spdx.json
        
        Write-Host "SBOM generated successfully"
      shell: powershell

    - name: Upload SBOM as artifact
      # if: steps.changes.outputs.changed == 'true' && github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30

  test:
    needs: build
    runs-on: windows-latest
    if: needs.build.outputs.image-tags != ''
    
    strategy:
      matrix:
        test-scenario:
          - basic-functionality
          - api-endpoints
          - report-generation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract test image tag
      id: test-tag
      run: |
        $tags = "${{ needs.build.outputs.image-tags }}"
        $firstTag = ($tags -split ",")[0]
        echo "tag=$firstTag" >> $env:GITHUB_OUTPUT
        Write-Host "Using tag for testing: $firstTag"
      shell: powershell

    - name: Run SSRS Container for Testing
      run: |
        $containerName = "ssrs-test-${{ matrix.test-scenario }}"
        
        Write-Host "Starting container: $containerName"
        docker run -d --name $containerName `
          -p 1433:1433 -p 80:80 `
          -e ACCEPT_EULA=Y `
          -e sa_password="TestPass123!" `
          -e ssrs_user="TestAdmin" `
          -e ssrs_password="TestAdmin123!" `
          --memory 6048mb `
          ${{ steps.test-tag.outputs.tag }}
        
        # Wait for container to be ready
        $timeout = 300
        $elapsed = 0
        $interval = 15
        
        do {
          $containerStatus = docker inspect --format='{{.State.Status}}' $containerName
          Write-Host "Container status: $containerStatus (${elapsed}s elapsed)"
          
          if ($containerStatus -eq "running") {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost/reports" -TimeoutSec 10 -UseBasicParsing
              if ($response.StatusCode -eq 200) {
                Write-Host "SSRS is ready!"
                break
              }
            }
            catch {
              Write-Host "SSRS not ready yet, waiting..."
            }
          }
          
          Start-Sleep $interval
          $elapsed += $interval
        } while ($elapsed -lt $timeout)
        
        if ($elapsed -ge $timeout) {
          Write-Host "Container logs:"
          docker logs $containerName
          throw "SSRS failed to start within timeout period"
        }
      shell: powershell

    - name: Run Tests - ${{ matrix.test-scenario }}
      run: |
        $containerName = "ssrs-test-${{ matrix.test-scenario }}"
        
        switch ("${{ matrix.test-scenario }}") {
          "basic-functionality" {
            Write-Host "Testing basic SSRS functionality..."
            
            # Test web interface
            $response = Invoke-WebRequest -Uri "http://localhost/reports" -UseBasicParsing
            if ($response.StatusCode -ne 200) {
              throw "SSRS web interface not accessible"
            }
            Write-Host "âœ“ Web interface accessible"
            
            # Test SQL Server connection
            $connectionString = "Server=localhost,1433;Database=master;User Id=sa;Password=TestPass123!;TrustServerCertificate=true;"
            $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
            try {
              $connection.Open()
              Write-Host "âœ“ SQL Server connection successful"
              $connection.Close()
            }
            catch {
              throw "SQL Server connection failed: $($_.Exception.Message)"
            }
          }
          
          "api-endpoints" {
            Write-Host "Testing SSRS API endpoints..."
            
            # Test SOAP endpoints
            $endpoints = @(
              "http://localhost/reportserver/ReportService2010.asmx?WSDL",
              "http://localhost/reportserver/ReportExecution2005.asmx?WSDL"
            )
            
            foreach ($endpoint in $endpoints) {
              try {
                $response = Invoke-WebRequest -Uri $endpoint -UseBasicParsing -TimeoutSec 30
                if ($response.StatusCode -eq 200 -and $response.Content -like "*wsdl*") {
                  Write-Host "âœ“ Endpoint accessible: $endpoint"
                } else {
                  throw "Invalid WSDL response"
                }
              }
              catch {
                throw "Endpoint test failed for $endpoint : $($_.Exception.Message)"
              }
            }
          }
          
          "report-generation" {
            Write-Host "Testing report generation capabilities..."
            
            # Test with PowerShell SSRS module
            try {
              # Install ReportingServicesTools if not available
              if (-not (Get-Module -ListAvailable -Name ReportingServicesTools)) {
                Install-Module -Name ReportingServicesTools -Force -Scope CurrentUser -AllowClobber
              }
              
              $credential = New-Object System.Management.Automation.PSCredential("TestAdmin", (ConvertTo-SecureString "TestAdmin123!" -AsPlainText -Force))
              
              # Test web service proxy
              $proxy = New-WebServiceProxy -Uri "http://localhost/reportserver/ReportService2010.asmx?WSDL" -Credential $credential
              
              # Test basic operations
              $systemProps = $proxy.GetSystemProperties()
              Write-Host "âœ“ GetSystemProperties successful"
              
              $folders = $proxy.ListChildren("/", $false)
              Write-Host "âœ“ ListChildren successful - Found $($folders.Length) items"
              
            }
            catch {
              Write-Host "Warning: Advanced report testing failed: $($_.Exception.Message)"
              Write-Host "This might be expected in some environments"
            }
          }
        }
        
        Write-Host "All tests passed for scenario: ${{ matrix.test-scenario }}"
      shell: powershell

    - name: Cleanup Test Container
      if: always()
      run: |
        $containerName = "ssrs-test-${{ matrix.test-scenario }}"
        if (docker ps -a --format "{{.Names}}" | Select-String -Pattern $containerName -Quiet) {
          Write-Host "Stopping and removing container: $containerName"
          docker stop $containerName
          docker rm $containerName
        }
      shell: powershell

  security-scan:
    needs: build
    runs-on: windows-latest  # Changed to windows for Windows containers
    if: needs.build.outputs.image-tags != '' && github.event_name != 'pull_request'
    
    steps:
    - name: Extract scan image tag
      id: scan-tag
      run: |
        $tags = "${{ needs.build.outputs.image-tags }}"
        $firstTag = ($tags -split ",")[0]
        echo "tag=$firstTag" >> $env:GITHUB_OUTPUT
        Write-Host "Using tag for scanning: $firstTag"
      shell: powershell

    - name: Install Trivy
      run: |
        # Download and install Trivy for Windows
        $trivyVersion = "0.47.0"
        $downloadUrl = "https://github.com/aquasecurity/trivy/releases/download/v${trivyVersion}/trivy_${trivyVersion}_Windows-64bit.zip"
        
        Write-Host "Downloading Trivy v$trivyVersion..."
        Invoke-WebRequest -Uri $downloadUrl -OutFile "trivy.zip"
        
        # Extract Trivy
        Expand-Archive -Path "trivy.zip" -DestinationPath "C:\trivy" -Force
        
        # Add to PATH
        $env:PATH += ";C:\trivy"
        echo "C:\trivy" >> $env:GITHUB_PATH
        
        # Verify installation
        C:\trivy\trivy.exe --version
      shell: powershell

    - name: Run Trivy vulnerability scanner
      run: |
        $imageTag = "${{ steps.scan-tag.outputs.tag }}"
        Write-Host "Scanning image: $imageTag"
        
        # Run Trivy scan
        C:\trivy\trivy.exe image --format sarif --output trivy-results.sarif $imageTag
        
        # Also generate a readable report
        C:\trivy\trivy.exe image --format table --output trivy-report.txt $imageTag
        
        Write-Host "Vulnerability scan completed"
      shell: powershell

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: |
          trivy-results.sarif
          trivy-report.txt
        retention-days: 30

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          README.md
          LICENSE
        body: |
          ## SSRS Docker Image Release
          
          ### Docker Images
          - **Image**: `${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - **Latest**: `${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest`
          
          ### Usage
          ```bash
          docker run -d -p 1433:1433 -p 80:80 \
            -e ACCEPT_EULA=Y \
            -e sa_password=<YOUR_SA_PASSWORD> \
            -e ssrs_user=SSRSAdmin \
            -e ssrs_password=<YOUR_SSRS_PASSWORD> \
            --memory 6048mb \
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          Access SSRS at: http://localhost/reports
          
          ### Changes
          See the full changelog below.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}